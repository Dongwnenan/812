订单管理开发开始

  订单管理页使用到的 Timeline 时间线  组件
        https://element.eleme.cn/#/zh-CN/component/timeline

        可视化地呈现时间流信息。

  

      找到   基础用法

      点击  显示代码




电商管理后台 API 接口文档.md


		1.10. 订单管理

		1.10.1. 订单数据列表

		请求路径：orders
		请求方法：get
		请求参数
		参数名	参数说明	备注
		query	查询参数	可以为空
		pagenum	当前页码	不能为空
		pagesize	每页显示条数	不能为空
		user_id	用户 ID	可以为空
		pay_status	支付状态	可以为空
		is_send	是否发货	可以为空
		order_fapiao_title	['个人','公司']	可以为空
		order_fapiao_company	公司名称	可以为空
		order_fapiao_content	发票内容	可以为空
		consignee_addr	发货地址	可以为空



		1.10.2. 修改订单状态

		请求路径：orders/:id
		请求方法：put
		请求参数
		参数名	参数说明	备注
		id	订单 ID	不能为空携带在url中
		is_send	订单是否发货	1:已经发货，0:未发货
		order_pay	订单支付	支付方式 0 未支付 1 支付宝 2 微信 3 银行卡
		order_price	订单价格	
		order_number	订单数量	
		pay_status	支付状态	订单状态： 0 未付款、1 已付款
		请求数据说明
		所有请求数据都是增量更新，如果参数不填写，就不会更新该字段




		1.10.3. 查看订单详情

		请求路径：orders/:id
		请求方法：get
		请求参数
		参数名	参数说明	备注
		id	订单 ID	不能为空携带在url中


		1.10.4. 修改地址

		省市区/县联动效果 - 结合ElementUI的 el-cascader 组件


		1.10.5. 查看物流信息

		请求路径：/kuaidi/:id

		请求方法：get

		供测试的物流单号：1106975712662




   打开  plugins/element.js

   修改代码如下

import Vue from 'vue'
import {
  Button,
  Form,
  FormItem,
  Input,
  Message,
  Container,
  Header,
  Aside,
  Main,
  Menu,
  Submenu,
  MenuItem,
  Breadcrumb,
  BreadcrumbItem,
  Card,
  Row,
  Col,
  Table,
  TableColumn,
  Switch,
  Tooltip,
  Pagination,
  Dialog,
  MessageBox,
  Tag,
  Tree,
  Select,
  Option,
  Cascader,
  Alert,
  Tabs,
  TabPane,
  Steps,
  Step,
  CheckboxGroup,
  Checkbox,
  Timeline,
  TimelineItem
} from 'element-ui'

Vue.use(Button)
Vue.use(Form)
Vue.use(FormItem)
Vue.use(Input)
Vue.use(Container)
Vue.use(Header)
Vue.use(Aside)
Vue.use(Main)
Vue.use(Menu)
Vue.use(Submenu)
Vue.use(MenuItem)
Vue.use(Breadcrumb)
Vue.use(BreadcrumbItem)
Vue.use(Card)
Vue.use(Row)
Vue.use(Col)
Vue.use(Table)
Vue.use(TableColumn)
Vue.use(Switch)
Vue.use(Tooltip)
Vue.use(Pagination)
Vue.use(Dialog)
Vue.use(Tag)
Vue.use(Tree)
Vue.use(Select)
Vue.use(Option)
Vue.use(Cascader)
Vue.use(Alert)
Vue.use(Tabs)
Vue.use(TabPane)
Vue.use(Steps)
Vue.use(Step)
Vue.use(CheckboxGroup)
Vue.use(Checkbox)
Vue.use(Timeline)
Vue.use(TimelineItem)

Vue.prototype.$message = Message
Vue.prototype.$confirm = MessageBox.confirm





右键 components ---  new  directory  name:order


  将课件中的 citydata.js 拷贝到该目录下
  

  右键 order ---  new  file   name:Order.vue


<template>
  <div>
    <!-- 面包屑导航区域 -->
    <el-breadcrumb separator-class="el-icon-arrow-right">
      <el-breadcrumb-item :to="{ path: '/home' }">首页</el-breadcrumb-item>
      <el-breadcrumb-item>订单管理</el-breadcrumb-item>
      <el-breadcrumb-item>订单列表</el-breadcrumb-item>
    </el-breadcrumb>

    <!-- 卡片视图区域 -->
    <el-card>
      <el-row>
        <el-col :span="8">
          <el-input placeholder="请输入内容">
            <el-button slot="append" icon="el-icon-search"></el-button>
          </el-input>
        </el-col>
      </el-row>

      <!-- 订单列表数据 -->
      <el-table :data="orderlist" border stripe>
        <el-table-column type="index"></el-table-column>
        <el-table-column label="订单编号" prop="order_number"></el-table-column>
        <el-table-column label="订单价格" prop="order_price"></el-table-column>
        <el-table-column label="是否付款" prop="pay_status">
          <template slot-scope="scope">
            <el-tag type="success" v-if="scope.row.pay_status === '1'">已付款</el-tag>
            <el-tag type="danger" v-else>未付款</el-tag>
          </template>
        </el-table-column>
        <el-table-column label="是否发货" prop="is_send">
          <template slot-scope="scope">
            <template>
              {{scope.row.is_send}}
            </template>
          </template>
        </el-table-column>
        <el-table-column label="下单时间" prop="create_time">
          <template slot-scope="scope">
            {{scope.row.create_time | dateFormat}}
          </template>
        </el-table-column>
        <el-table-column label="操作">
          <template slot-scope="scope">
            <el-button size="mini" type="primary" icon="el-icon-edit" @click="showBox"></el-button>
            <el-button size="mini" type="success" icon="el-icon-location" @click="showProgressBox"></el-button>
          </template>
        </el-table-column>
      </el-table>

      <!-- 分页区域 -->
      <el-pagination @size-change="handleSizeChange" @current-change="handleCurrentChange" :current-page="queryInfo.pagenum" :page-sizes="[5, 10, 15]" :page-size="queryInfo.pagesize" layout="total, sizes, prev, pager, next, jumper" :total="total">
      </el-pagination>
    </el-card>

    <!-- 修改地址的对话框 -->
    <el-dialog title="修改地址" :visible.sync="addressVisible" width="50%" @close="addressDialogClosed">
      <el-form :model="addressForm" :rules="addressFormRules" ref="addressFormRef" label-width="100px">
        <el-form-item label="省市区/县" prop="address1">
          <el-cascader :options="cityData" v-model="addressForm.address1"></el-cascader>
        </el-form-item>
        <el-form-item label="详细地址" prop="address2">
          <el-input v-model="addressForm.address2"></el-input>
        </el-form-item>
      </el-form>
      <span slot="footer" class="dialog-footer">
        <el-button @click="addressVisible = false">取 消</el-button>
        <el-button type="primary" @click="addressVisible = false">确 定</el-button>
      </span>
    </el-dialog>

    <!-- 展示物流进度的对话框 -->
    <el-dialog title="物流进度" :visible.sync="progressVisible" width="50%">
      <!-- 时间线 -->
      <el-timeline>
        <el-timeline-item v-for="(activity, index) in progressInfo" :key="index" :timestamp="activity.time">
          {{activity.context}}
        </el-timeline-item>
      </el-timeline>
    </el-dialog>
  </div>
</template>

<script>
import cityData from './citydata.js'

export default {
  data() {
    return {
      queryInfo: {
        query: '',
        pagenum: 1,
        pagesize: 10
      },
      total: 0,
      orderlist: [],
      addressVisible: false,
      addressForm: {
        address1: [],
        address2: ''
      },
      addressFormRules: {
        address1: [
          { required: true, message: '请选择省市区县', trigger: 'blur' }
        ],
        address2: [
          { required: true, message: '请填写详细地址', trigger: 'blur' }
        ]
      },
      cityData,
      progressVisible: false,
      progressInfo: []
    }
  },
  created() {
    this.getOrderList()
  },
  methods: {
    async getOrderList() {
      const { data: res } = await this.$http.get('orders', {
        params: this.queryInfo
      })

      if (res.meta.status !== 200) {
        return this.$message.error('获取订单列表失败！')
      }

      console.log(res)
      this.total = res.data.total
      this.orderlist = res.data.goods
    },
    handleSizeChange(newSize) {
      this.queryInfo.pagesize = newSize
      this.getOrderList()
    },
    handleCurrentChange(newPage) {
      this.queryInfo.pagenum = newPage
      this.getOrderList()
    },
    // 展示修改地址的对话框
    showBox() {
      this.addressVisible = true
    },
    addressDialogClosed() {
      this.$refs.addressFormRef.resetFields()
    },
    async showProgressBox() {
      const { data: res } = await this.$http.get('/kuaidi/804909574412544580')

      if (res.meta.status !== 200) {
        return this.$message.error('获取物流进度失败！')
      }

      this.progressInfo = res.data

      this.progressVisible = true
      console.log(this.progressInfo)
    }
  }
}
</script>

<style lang="less" scoped>

.el-cascader {
  width: 100%;
}
</style>




打开 router/index.js

  加入

import Order from '../components/order/Order.vue'


  在

       { path: '/goods/add', component: Add }

        下面加入

        ,
        { path: '/orders', component: Order }


  点击  左侧    任务     

                     
                    点击  serve  

                          点击   停止    会停止项目运行

                    点击  serve  点击  运行

                    点击  启动app


  http://localhost:8080/#/login



vue   ui  

   点击 左侧  依赖

   点击 右上角  安装依赖

   运行依赖   搜索       echarts

        

   点击   echarts

         点击右侧  查看详情  http://echarts.apache.org/zh/index.html

             菜单  文档   ---  教程

             5 分钟上手 ECharts


   点击 右下角     安装    echarts



电商管理后台 API 接口文档.md


	1.11. 数据统计

	1.11.1. 基于时间统计的折线图
	请求路径：reports/type/1

	请求方法：get

	响应数据

	需要合并的选项


	options: {
        title: {
          text: '用户来源'
        },
        tooltip: {
          trigger: 'axis',
          axisPointer: {
            type: 'cross',
            label: {
              backgroundColor: '#E9EEF3'
            }
          }
        },
        grid: {
          left: '3%',
          right: '4%',
          bottom: '3%',
          containLabel: true
        },
        xAxis: [
          {
            boundaryGap: false
          }
        ],
        yAxis: [
          {
            type: 'value'
          }
        ]
      }









右键 components ---  new  directory  name:report


  右键 report ---  new  file   name:Report.vue


<template>
  <div>
    <!-- 面包屑导航区域 -->
    <el-breadcrumb separator-class="el-icon-arrow-right">
      <el-breadcrumb-item :to="{ path: '/home' }">首页</el-breadcrumb-item>
      <el-breadcrumb-item>数据统计</el-breadcrumb-item>
      <el-breadcrumb-item>数据报表</el-breadcrumb-item>
    </el-breadcrumb>

    <!-- 卡片视图区域 -->
    <el-card>
      <!-- 2. 为ECharts准备一个具备大小（宽高）的Dom -->
      <div id="main" style="width: 750px;height:400px;"></div>
    </el-card>
  </div>
</template>

<script>
// 1. 导入 echarts
// import echarts from 'echarts'
var echarts = require('echarts');
import _ from 'lodash'

export default {
  data() {
    return {
      // 需要合并的数据
      options: {
        title: {
          text: '用户来源'
        },
        tooltip: {
          trigger: 'axis',
          axisPointer: {
            type: 'cross',
            label: {
              backgroundColor: '#E9EEF3'
            }
          }
        },
        grid: {
          left: '3%',
          right: '4%',
          bottom: '3%',
          containLabel: true
        },
        xAxis: [
          {
            boundaryGap: false
          }
        ],
        yAxis: [
          {
            type: 'value'
          }
        ]
      }
    }
  },
  created() {},
  // 此时，页面上的元素，已经被渲染完毕了！
  async mounted() {
    // 3. 基于准备好的dom，初始化echarts实例
    var myChart = echarts.init(document.getElementById('main'))

    const { data: res } = await this.$http.get('reports/type/1')
    if (res.meta.status !== 200) {
      return this.$message.error('获取折线图数据失败！')
    }

    // 4. 准备数据和配置项
    const result = _.merge(res.data, this.options)

    // 5. 展示数据
    myChart.setOption(result)
  },
  methods: {}
}
</script>

<style lang="less" scoped>
</style>




打开 router/index.js

  加入

  import Report from '../components/report/Report.vue'



  在

       { path: '/orders', component: Order }

        下面加入

        ,
        { path: '/reports', component: Report }



  点击  左侧    任务     

                     
                    点击  serve  

                          点击   停止    会停止项目运行

                    点击  serve  点击  运行

                    点击  启动app


  http://localhost:8080/#/login


项目优化与部署

     横向页面加载进度条


     使用  https://github.com/rstacruz/nprogress


找到 

Basic usage
Simply call start() and done() to control the progress bar.

NProgress.start();
NProgress.done();

   通过以上2个函数即可实现




   vue   ui  

   点击 左侧  依赖

   点击 右上角  安装依赖

   运行依赖   搜索      nprogress

        

   点击  nprogress

         点击右侧  查看详情 


   点击 右下角     安装    nprogress
   

    如果无法安装通过  cnpm  i   --save  nprogress


  打开  main.js

  加入

    // 导入 NProgress 包对应的JS和CSS
	import NProgress from 'nprogress'
	import 'nprogress/nprogress.css'

  将

     axios.interceptors.request.use(config => {
	  // console.log(config)
	  config.headers.Authorization = window.sessionStorage.getItem('token')
	  // 在最后必须 return config
	  return config
	})

  改为


// 在 request 拦截器中，展示进度条 NProgress.start()
axios.interceptors.request.use(config => {
  // console.log(config)
  NProgress.start()
  config.headers.Authorization = window.sessionStorage.getItem('token')
  // 在最后必须 return config
  return config
})
// 在 response 拦截器中，隐藏进度条 NProgress.done()
axios.interceptors.response.use(config => {
  NProgress.done()
  return config
})



  点击  左侧    任务     

                     
                    点击  serve  

                          点击   停止    会停止项目运行

                    点击  serve  点击  运行

                    点击  启动app


  http://localhost:8080/#/login


  点击 左侧不同导航链接 

   测试是否出现  横向页面加载进度条




点击  左侧    任务     

                     
                    点击  build  

                           点击  运行

                   



  打开  .prettierrc

  加入属性


  ,
  "printWidth": 200



  配置插件  babel-plugin-transform-remove-console

  把项目中所有的   console.log 移除掉


  https://www.npmjs.com/package/babel-plugin-transform-remove-console

   This plugin removes all console.* calls.



  点击 左侧  依赖

   点击 右上角  安装依赖

   开发依赖   搜索      babel-plugin-transform-remove-console

        

   点击  babel-plugin-transform-remove-console

         点击右侧  查看详情 


   点击 右下角     安装    babel-plugin-transform-remove-console

   或者 

      cnpm i babel-plugin-transform-remove-console --save-dev







   打开  babel.config.js

   在

   [
      'component',
      {
        libraryName: 'element-ui',
        styleLibraryName: 'theme-chalk'
      }
    ]

    下面加入


    ,
    'transform-remove-console'



点击  左侧    任务     

                     
                    点击  build  

                           点击  运行



   列出如:

   File                                   Size              Gzipped

  dist/js/chunk-vendors.975102cc.js      1912.94 KiB       567.70 KiB
  dist/js/app.58d8e14e.js                188.86 KiB        39.61 KiB
  dist/css/chunk-vendors.09a9dff1.css    172.71 KiB        26.12 KiB
  dist/css/app.1be2f32d.css              20.05 KiB         6.20 KiB

  Images and other types of assets omitted.



   现在希望是开发阶段不移除  console.log
   发布阶段在移除          console.log


   打开  babel.config.js

   加入


    // 这是项目发布阶段需要用到的 babel 插件
	const prodPlugins = []
	if (process.env.NODE_ENV === 'production') {
	  prodPlugins.push('transform-remove-console')
	}


    将  'transform-remove-console'

    改为

    // 发布产品时候的插件数组
    ...prodPlugins


    


